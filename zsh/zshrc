# vim:set noexpandtab

# External plugins {{{
source ~/.zsh/zsh-hl/fast-syntax-highlighting.plugin.zsh
source ~/.zsh/zsh-hss/zsh-history-substring-search.zsh
# }}}

# XDG defaults {{{
: ${XDG_CONFIG_HOME:="$HOME/.config"}
: ${XDG_CACHE_HOME:="$HOME/.cache"}
: ${XDG_DATA_HOME:="$HOME/.local/share"}
: ${XDG_RUNTIME_DIR:="/tmp/$USER"}
export XDG_CONFIG_HOME XDG_CACHE_HOME XDG_DATA_HOME XDG_RUNTIME_DIR
[[ ! -d $XDG_RUNTIME_DIR ]] && mkdir -p $XDG_RUNTIME_DIR && chmod 0700 $XDG_RUNTIME_DIR
# mount tmpfs at /tmp. Do not use ZFS for XDG_RUNTIME_DIR because posix_fallocate.
# with pam_ck_connector (ConsoleKit2), XDG_RUNTIME_DIR is set to /var/run/user/UID
# and that should be on tmpfs too
# }}}

# Color {{{
base16() {
	local SCHEME="$*"
	local BASE16_SHELL="$HOME/.zsh/base16-shell/scripts/base16-$SCHEME.sh"
	if [[ -s $BASE16_SHELL ]]; then
		source $BASE16_SHELL
		export BASE16_SCHEME="$SCHEME"
		echo -n $SCHEME > $XDG_CONFIG_HOME/base16/scheme
	else
		echo "Looks like $BASE16_SHELL does not exist :-("
	fi
}

_base16() { compadd $(find ~/.zsh/base16-shell/scripts | xargs basename | sed -e "s/base16-//" -e "s/\.sh//") }
BASE16_SCHEME="$(cat $XDG_CONFIG_HOME/base16/scheme 2>/dev/null || echo default)"
export BASE16_SCHEME
source "$HOME/.zsh/base16-shell/scripts/base16-$BASE16_SCHEME.sh"
# }}}

# Support for tools, programming languages, etc {{{
# Less
export LESS="-R"
export LESSHISTFILE="$XDG_CACHE_HOME/less_history"
export MANWIDTH="100"

# Ripgrep
export RIPGREP_CONFIG_PATH="$HOME/.config/ripgreprc"

# Tmux
export TMUX_TMPDIR="$XDG_RUNTIME_DIR"

# Go
export GOPATH=~
export GOBIN=~/.local/bin

# JS
[[ -d /usr/local/lib/node_modules ]] && export NODE_PATH=/usr/local/lib/node_modules

# Java
[[ -e /usr/libexec/java_home ]] && export JAVA_HOME=$(/usr/libexec/java_home)

# Python
export PYTHONDONTWRITEBYTECODE=true
export PYTHONSTARTUP=$XDG_CONFIG_HOME/python/rc.py

# Perl
export PERL_MB_OPT="--install_base \"$HOME/.local\""
export PERL_MM_OPT="INSTALL_BASE=$HOME/.local"
export PERL5LIB=~/.local/lib/perl5:$PERL5LIB

# Compiling stuff on OS X
[[ -e $commands[brew] ]] && export ARCHFLAGS="-arch x86_64"

# OCaml
[[ -e $commands[opam] ]] && eval $(opam config env)

# Rust
#[[ -e $commands[rustc] ]] && export LD_LIBRARY_PATH="$(rustc --print sysroot)/lib:$LD_LIBRARY_PATH"
export CARGO_HOME="$XDG_DATA_HOME/cargo"
export CARGO_INSTALL_ROOT="$HOME/.local"
# }}}

# Aliases and functions {{{
[[ -e $XDG_CONFIG_HOME/broot/launcher/bash/br ]] && source $XDG_CONFIG_HOME/broot/launcher/bash/br
[[ -e ~/.rc ]] && source ~/.rc
[[ ! -e $commands[gmake] ]] && alias gmake=make
dighost() { host $(dig $1 | grep ANSWER -C 1 | tail -n 1 | awk '{ print $5 }') }
drillhost() { host $(drill $1 | grep ANSWER -C 1 | tail -n 1 | awk '{ print $5 }') }
mcd() { mkdir -p $1 && cd $1; }
srcrepos() { find -s $HOME/src -type d \( -path '*/.git' -or -path '*/.hg' \) -maxdepth 5 -prune -print0 | xargs -0 -I '{}' dirname '{}' }
prj() { cd $(srcrepos | sed "s|$HOME|~|" | $MENU | sed "s|^~|$HOME|") }

if [[ -n $TMUX ]]; then
	escseq() { printf "\033Ptmux;\033\033]$1\007\033\\" }
else
	escseq() { printf "\033]$1\007" }
fi

precmd() {
	if [[ $PRIVATE == 1 ]]; then
		SCOLOR=$bg[magenta]$fg_bold[black]
	else
		SCOLOR=$fg_bold[green]
	fi
}

fancy-ctrl-z() {
	if [[ $#BUFFER -eq 0 ]]; then
		BUFFER=fg
		zle accept-line
	else
		zle push-input
		zle clear-screen
	fi
}
# }}}

# Basic settings {{{
# Modules
autoload -U colors && colors
autoload -U compinit && zmodload -i zsh/complist
autoload -U edit-command-line && zle -N edit-command-line
autoload -U url-quote-magic && zle -N self-insert url-quote-magic
autoload -U zmv

# Keybindings
zmodload zsh/terminfo
bindkey -e # Emacs style keys in shell
bindkey '^xe' edit-command-line
bindkey '^x^e' edit-command-line
bindkey "\e[3~" delete-char # Del
zle -N fancy-ctrl-z && bindkey '^Z' fancy-ctrl-z
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
#[[ -n $terminfo[kcuu1] ]] && bindkey $terminfo[kcuu1] history-substring-search-up
#[[ -n $terminfo[kcud1] ]] && bindkey $terminfo[kcud1] history-substring-search-down

# Stuff
setopt pushd_ignore_dups auto_pushd auto_name_dirs auto_cd \
	prompt_subst no_beep multios extended_glob interactive_comments

# History
setopt hist_ignore_dups hist_ignore_space hist_reduce_blanks hist_verify \
	hist_expire_dups_first hist_find_no_dups share_history extended_history \
	append_history inc_append_history nobanghist

# Completion
setopt menu_complete # Autoselect the first suggestion
setopt complete_in_word
setopt no_complete_aliases # Actually: completes aliases! (I guess that means "no ~separate functions~ for aliases")
unsetopt always_to_end
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' insert-tab pending
zstyle ':completion:*' expand "yes"
zstyle ':completion:*' matcher-list "m:{a-zA-Z}={A-Za-z}" # ignore case
zstyle ':completion:*' list-colors ""
zstyle ':completion:*' menu select=2 _complete _ignored _approximate
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*:prefix:*' add-space true
zstyle ':completion:*:descriptions' format "|| %{${fg[yellow]}%}%d%{${reset_color}%}"
zstyle ':completion:*:messages' format $'\e[00;31m%d'
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric
zstyle ':completion:*:cd:*' ignore-parents parent pwd
zstyle ':completion:*:rm:*' ignore-line yes
zstyle ':completion:*:*:*:processes' list-colors "=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01"
zstyle ':completion:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"
zstyle ':completion:*:*:*:*:hosts' list-colors "=*=$color[cyan];$color[bg-black]"
zstyle ':completion:*:functions' ignored-patterns "_*"
zstyle ':completion:*:original' list-colors "=*=$color[red];$color[bold]"
zstyle ':completion:*:parameters' list-colors "=[^a-zA-Z]*=$color[red]"
zstyle ':completion:*:aliases' list-colors "=*=$color[green]"
fpath+=(
	~/.zsh/zsh-completions/src(N)
	$XDG_DATA_HOME/zsh/site-functions(N)
	/usr/local/share/zsh/site-functions(N)
)
fignore+=.DS_Store
compinit -i
compdef mcd=cd
_loadkeys() { compadd $(find ~/.ssh -perm 0600 ! -type s | xargs basename) }
compdef _loadkeys loadkeys
compdef _base16 base16

HISTFILE=~/.tmp/history_zsh
HISTSIZE=40960
SAVEHIST=40960
setopt HIST_EXPIRE_DUPS_FIRST
WORDCHARS='*?_-.[]~=&;!#$%^(){}<>' # Like default, but without / -- ^W must be useful in paths, like it is in vim, bash, tcsh
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export CLICOLOR="yes"

PROMPT="%B%F{cyan}%~%b %F{yellow}%#%f "
RPROMPT="%(0?..%F{red}^%?^) %F{blue}%T%f"

cdpath=(~/src/github.com/unrelentingtech ~/src/github.com/DankBSD)

typeset -U path # U for Unique, like a set; (N) == only if exists
path=(
	~/.local/bin(N) ~/bin(N) ~/.cask/bin(N)
	$BREWGO/bin(N) $BREWGO/libexec/bin(N) /usr/local/go/bin(N)
	$JAVA_HOME/bin(N)
	$RBENV_ROOT/shims(N)
	~/.gem/ruby/2.7/bin(N)
	~/.gem/ruby/2.6/bin(N)
	/usr/local/lib/erlang22/bin(N)
	/usr/local/lib/erlang21/bin(N)
	/usr/local/share/npm/bin(N)
	/usr/local/sbin /usr/local/bin $path
)
export PATH
# }}}

# Default programs {{{
# (must come after PATH)
export PAGER=less

[[ -e $commands[vi]   ]] && export EDITOR=vi
[[ -e $commands[vim]  ]] && export EDITOR=vim
[[ -e $commands[nvim] ]] && export EDITOR=nvim
alias vi=$EDITOR
[[ -e $commands[kak]  ]] && export EDITOR=kak
export VISUAL=$EDITOR

[[ -e $commands[peco]   ]] && export MENU=peco
[[ -e $commands[fzy]    ]] && export MENU=fzy
# }}}

# SSH agent {{{
# working socket -> either forwarded or started like this
: ${SSH_AUTH_SOCK="$XDG_RUNTIME_DIR/ssh-agent"}
if [[ ! -S $SSH_AUTH_SOCK ]]; then
	eval $(ssh-agent -a $SSH_AUTH_SOCK)
fi
export SSH_AUTH_SOCK
# }}}

[[ -e ~/.zshrc.local ]] && source ~/.zshrc.local
[[ $PRIVATE == 1 ]] && unset HISTFILE
